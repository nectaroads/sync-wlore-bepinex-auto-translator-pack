const axios = require("axios");
const FormData = require("form-data");
const fs = require("fs");
const fsp = require("fs").promises;
const path = require("path");
const { print } = require("./io");

console.clear();

const SERVERIP = "http://192.168.0.121:24575/syncfiles";
const LANGUAGE = "en";
const KEY = "hello";

function main() {
  print(`[Setup] Application event: Started`);
  const time = new Date().toLocaleString("en-US");
  setInterval(() => {
    (async () => {
      try {
        const form = new FormData();
        const manualDir = path.join(__dirname, LANGUAGE, "manual");
        for (const fname of fs.readdirSync(manualDir)) {
          if (fname.toLowerCase().endsWith(".txt")) {
            form.append(
              "manual",
              fs.createReadStream(path.join(manualDir, fname)),
              fname
            );
          }
        }
        const clientMergedPath = path.join(
          __dirname,
          LANGUAGE,
          "Text",
          "_AutoGeneratedTranslations.txt"
        );
        form.append(
          "merged",
          fs.createReadStream(clientMergedPath),
          "_AutoGeneratedTranslations.txt"
        );
        form.append("locale", LANGUAGE);
        form.append("key", KEY);
        const res = await axios.post(SERVERIP, form, {
          headers: form.getHeaders(),
          maxBodyLength: Infinity,
          timeout: 120000,
        });
        await fsp.mkdir(manualDir, { recursive: true });
        await fsp.mkdir(path.dirname(clientMergedPath), { recursive: true });
        const serverManual = Array.isArray(res.data?.manual)
          ? res.data.manual
          : [];
        let wroteManual = 0;
        for (const file of serverManual) {
          if (!file?.name || typeof file?.content !== "string") continue;
          if (!file.name.toLowerCase().endsWith(".txt")) continue;
          const safeName = path.basename(file.name);
          const target = path.join(manualDir, safeName);
          await fsp.writeFile(target, file.content, "utf8");
          wroteManual++;
        }
        const serverMerged = res.data?.merged;
        if (serverMerged && typeof serverMerged.content === "string") {
          await fsp.writeFile(clientMergedPath, serverMerged.content, "utf8");
        }
        print(`[Log] Synchronize Event: Success ✅ at ${time}`);
      } catch (err) {
        print(`[Log] Synchronize Event: Fail ⛔ at ${time}`);
      }
    })();
  }, 1000 * 60 * 3);
}

main();
